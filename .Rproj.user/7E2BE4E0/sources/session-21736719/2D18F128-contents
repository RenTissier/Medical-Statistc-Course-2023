function (i = NULL, data = NULL, featureGroups = NULL, sampleGroups = NULL, 
          fix.seed = FALSE, nullmodel = FALSE, ncpus = parallel::detectCores(), 
          par.method = ifelse(Sys.info()[["sysname"]] == "Windows", 
                              "sockets", "forking"), ...) 
{
  if (is.null(data)) 
    stop("No data supplied.")
  if (is.null(featureGroups)) 
    stop("featureGroups is NULL.")
  if (is.null(sampleGroups)) 
    stop("sampleGroups is NULL.")
  if (nrow(data) != length(sampleGroups)) {
    if (ncol(data) == length(sampleGroups)) {
      warning("Number of rows in data does not match length of sampleGroups. Assuming data is meant to be transposed.")
      data <- t(data)
    }
    else {
      stop("Number of rows in data does not match length of sampleGroups.")
    }
  }
  if (!is.null(i)) {
    if (is.integer(i) && length(i) == 1) {
      warning("Deprecated use of inlai.par(). See documentation (?inlai.par). Will attempt to call .inlai.par() instead.")
      require(shrinkISO)
      return(.inlai.par(i = i, data = data, featureGroups = featureGroups, 
                        sampleGroups = sampleGroups, nullmodel = nullmodel, 
                        ...))
    }
    else {
      stop("Unsupported use of inlai.par(). Make sure all arguments are named (no positional arguments). See documentation (?inlai.par).")
    }
  }
  if (is.logical(fix.seed) && fix.seed) 
    fix.seed <- 42L
  if (is.numeric(fix.seed)) {
    set.seed(fix.seed)
  }
  else if (is.null(fix.seed) || !exists(".Random.seed")) {
    set.seed(NULL)
  }
  seeds <- sample(-.Machine$integer.max:.Machine$integer.max, 
                  length(featureGroups), replace = T)
  l_matrices <- lapply(1:length(featureGroups), function(i) {
    m <- data[, featureGroups[[i]]]
    attr(m, "feature.group.name") <- names(featureGroups)[[i]]
    attr(m, "seed") <- seeds[i]
    m
  })
  rm(data)
  gc()
  if (par.method == "sequential") {
    res.full <- lapply(l_matrices, FUN = .inlai.par, sampleGroups = sampleGroups, 
                       nullmodel = FALSE, ...)
    names(res.full) <- names(featureGroups)
    res.null <- lapply(l_matrices, FUN = .inlai.par, sampleGroups = sampleGroups, 
                       nullmodel = TRUE, ...)
    names(res.null) <- names(featureGroups)
  }
  else if (par.method == "forking") {
    res.full <- parallel::mclapply(l_matrices, FUN = .inlai.par, 
                                   sampleGroups = sampleGroups, nullmodel = FALSE, ..., 
                                   mc.cores = ncpus)
    names(res.full) <- names(featureGroups)
    res.null <- parallel::mclapply(l_matrices, FUN = .inlai.par, 
                                   sampleGroups = sampleGroups, nullmodel = TRUE, ..., 
                                   mc.cores = ncpus)
    names(res.null) <- names(featureGroups)
  }
  else if (par.method == "sockets") {
    cl <- parallel::makeCluster(ncpus)
    res.full <- parallel::parLapply(cl, l_matrices, fun = .inlai.par, 
                                    sampleGroups = sampleGroups, nullmodel = FALSE, ...)
    names(res.full) <- names(featureGroups)
    res.null <- parallel::parLapply(cl, l_matrices, fun = .inlai.par, 
                                    sampleGroups = sampleGroups, nullmodel = TRUE, ...)
    names(res.null) <- names(featureGroups)
    stopCluster(cl)
  }
  else {
    stop("par.method must be one of c('forking', 'sockets', 'sequential').")
  }
  list(res.full = res.full, res.null = res.null)
}
